{"version":3,"file":"main.3f7b98638c99d8ad87ec.bundle.js","mappings":"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","sources":["webpack://restaurant/./class/order.js","webpack://restaurant/./class/chef.js","webpack://restaurant/./class/server.js","webpack://restaurant/./main.js"],"sourcesContent":["let index = 1;\r\nlet orders = [];\r\nconst $order_list = document.getElementById(\"orders\");\r\n\r\n\r\nconst cook_times = {\r\n  \"순댓국\": 2000,\r\n  \"해장국\": 1000,\r\n}\r\n\r\nexport class Order {\r\n\r\n  no;\r\n  name;\r\n  timer;\r\n  isCooked = false;\r\n\r\n  constructor(num, name, timer) {\r\n    this.no = num;\r\n    this.name = name;\r\n    this.timer = timer;\r\n  }\r\n\r\n  startCook() {\r\n    this.isCooked = true;\r\n  }\r\n\r\n}\r\n\r\nexport function setOrder(name) {\r\n  let order = new Order(index++, name, cook_times[name]);\r\n  orders.push(order);\r\n  updateOrderList();\r\n\r\n}\r\n\r\nexport function findFirstOrder() {\r\n  return orders.find((order) => order.isCooked === false);\r\n}\r\n\r\nexport function removeOrder(order) {\r\n  orders = orders.filter(item => item != order);\r\n}\r\n\r\nexport function updateOrderList() {\r\n\r\n  $order_list.innerHTML = '';\r\n\r\n  for (let item of orders) {\r\n    const order = document.createElement('tr');\r\n    order.innerHTML = `\r\n      <td>\r\n        ${item.no}\r\n      </td>\r\n      <td>\r\n        ${item.name}\r\n      </td>\r\n      <td>\r\n        ${item.isCooked ? \"요리중\" : \"대기중\"}\r\n      </td>\r\n    `\r\n    $order_list.appendChild(order);\r\n  }\r\n}","import { updateOrderList, removeOrder } from './order.js'\r\n\r\nconst $chef_list = document.getElementById(\"chefs\");\r\n\r\nexport class Chef {\r\n  name = \"요리사\";\r\n  isWorked = false;\r\n  nowCook = \"\";\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  cook(order) {\r\n    return new Promise(resolve => {\r\n      order.startCook();\r\n      this.isWorked = true;\r\n      this.nowCook = `${order.no}번 ${order.name}`;\r\n\r\n      updateChefList();\r\n      updateOrderList();\r\n\r\n      setTimeout(() => {\r\n        this.isWorked = false;\r\n        this.nowCook = '';\r\n\r\n        removeOrder(order);\r\n\r\n        updateChefList();\r\n        updateOrderList();\r\n\r\n        resolve(order);\r\n      }, order.timer);\r\n\r\n    })\r\n\r\n  };\r\n}\r\n\r\nexport function updateChefList() {\r\n\r\n  $chef_list.innerHTML = '';\r\n\r\n  for (let item of chefs) {\r\n    const chef = document.createElement('tr');\r\n    chef.innerHTML = `\r\n      <td>\r\n        ${item.name}\r\n      </td>\r\n      <td>\r\n        ${item.isWorked ? \"요리중\" : \"대기중\"}\r\n      </td>\r\n      <td>\r\n        ${item.nowCook}\r\n      </td>\r\n    `\r\n    $chef_list.appendChild(chef);\r\n  }\r\n}\r\n\r\nfunction findChef() {\r\n  return chefs.find((chef) => chef.isWorked === false);\r\n}\r\n\r\nexport function findRemainChef() {\r\n  return new Promise(resolve => {\r\n    // setInteval로 셰프 찾기\r\n    const chefInteval = setInterval(async () => {\r\n      const chef = findChef();\r\n      if (chef) {\r\n        clearInterval(chefInteval);\r\n        resolve(chef)\r\n      }\r\n    }, 50);\r\n  })\r\n}\r\n\r\nexport function startCook(chef, order) {\r\n  console.log(chef);\r\n  return chef.cook(order);\r\n}\r\n\r\nconst chefs = [new Chef(\"이연복\"), new Chef(\"김풍\")];","const $serve_list = document.getElementById(\"serves\");\r\nconst $result_list = document.getElementById(\"results\");\r\n\r\n\r\nclass Server {\r\n\r\n  name = \"웨이터\";\r\n  isWorked = false;\r\n  speed = 1000;\r\n  nowServe = \"\";\r\n  constructor(name, speed) {\r\n    this.name = name;\r\n    this.speed = speed;\r\n  }\r\n\r\n  serve(order) {\r\n    return new Promise(resolve => {\r\n      this.isWorked = true;\r\n      this.nowServe = `${order.no}번 ${order.name}`;\r\n\r\n      updateServeList()\r\n\r\n      setTimeout(() => {\r\n        this.isWorked = false;\r\n        this.nowServe = '';\r\n        results.push(order);\r\n\r\n        updateServeList()\r\n        updateResultList()\r\n\r\n        resolve(order);\r\n      }, this.speed);\r\n\r\n    })\r\n\r\n  };\r\n}\r\n\r\nfunction updateServeList() {\r\n  $serve_list.innerHTML = '';\r\n\r\n  for (let item of serves) {\r\n    const serve = document.createElement('tr');\r\n    serve.innerHTML = `\r\n      <td>\r\n        ${item.name}\r\n      </td>\r\n      <td>\r\n        ${item.isWorked ? \"서빙중\" : \"대기중\"}\r\n      </td>\r\n      <td>\r\n        ${item.nowServe}\r\n      </td>\r\n    `\r\n    $serve_list.appendChild(serve);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction updateResultList() {\r\n  $result_list.innerHTML = '';\r\n\r\n  for (let i = results.length - 1; i > -1; i--) {\r\n    const item = results[i]\r\n    const result = document.createElement('tr');\r\n    result.innerHTML = `\r\n      <td>\r\n        ${item.no}\r\n      </td>\r\n      <td>\r\n        ${item.name}\r\n      </td>\r\n    `\r\n    $result_list.appendChild(result);\r\n  }\r\n}\r\n\r\nfunction findServe() {\r\n  return serves.find((serve) => serve.isWorked === false);\r\n}\r\n\r\nexport function findRemainServe() {\r\n  // setInterval로 서버 찾기\r\n  return new Promise(resolve => {\r\n    const serveInteval = setInterval(async () => {\r\n      const server = findServe();\r\n      if (server) {\r\n        clearInterval(serveInteval);\r\n        resolve(server)\r\n      }\r\n    }, 50)\r\n  })\r\n}\r\n\r\nexport function startServe(server, order) {\r\n  return server.serve(order);\r\n}\r\n\r\n\r\nconst serves = [new Server(\"서빙로봇1\", 1000), new Server(\"서빙로봇2\", 2000)];\r\nconst results = [];\r\n","import { findRemainChef, startCook } from './class/chef.js';\r\nimport { setOrder, findFirstOrder } from './class/order.js';\r\nimport { findRemainServe, startServe } from './class/server.js';\r\n\r\nconst $orderBtns = document.getElementById(\"orderBtns\");\r\n\r\nasync function orderExecute(name) {\r\n  // Order 생성하기\r\n  setOrder(name);\r\n\r\n  // 가능한 쉐프 찾기\r\n  const chef = await findRemainChef()\r\n  // 최신 오더 찾기\r\n  const order = findFirstOrder()\r\n  // 요리 진행하기\r\n  await startCook(chef, order)\r\n  // 가능한 서버 찾기\r\n  const server = await findRemainServe();\r\n  // 서빙 진행하기\r\n  await startServe(server, order)\r\n\r\n}\r\n\r\n$orderBtns.addEventListener(\"click\", (e) => {\r\n\r\n  if (e.target.tagName !== \"BUTTON\") {\r\n    return;\r\n  }\r\n  let value = e.target.value;\r\n  orderExecute(value);\r\n});\r\n\r\n\r\n\r\n"],"names":["index","orders","$order_list","document","getElementById","cook_times","Order","no","name","timer","isCooked","constructor","num","this","startCook","updateOrderList","innerHTML","item","order","createElement","appendChild","$chef_list","Chef","isWorked","nowCook","cook","Promise","resolve","updateChefList","setTimeout","filter","removeOrder","chefs","chef","$serve_list","$result_list","Server","speed","nowServe","serve","updateServeList","results","push","i","length","result","updateResultList","serves","async","orderExecute","setOrder","chefInteval","setInterval","find","clearInterval","console","log","server","serveInteval","startServe","addEventListener","e","target","tagName","value"],"sourceRoot":""}